%locations
%{
    #include "TextHandler.hpp"

    #define YYERROR_VERBOSE 1

    extern int yylineno;
    extern char * yytext;
    extern int yylex();
    extern YYLTYPE yylloc;

    extern void yyerror(const char *s) 
    {
        DumpRow();
        PrintError(s);
    }

    #define YY_INPUT(buf,result,max_size)  {\
    result = GetNextChar(buf, max_size); \
    if (  result <= 0  ) \
    	result = YY_NULL; \
    }
%}
%defines

%start PROGRAM 
%token DIGIT DOT FLOAT_EXP
%token IF ELSE WHILE DO FOR RETURN
%token EQ LE GE NE
%token AND OR 
%token INCLUDE DEFINE TYPEDEF // Нужен struct и указатели с массивами
%token UNION STRUCT
%token STRING ID
%token PRINT
%token CONST INT CHAR FLOAT DOUBLE VOID
%token GLOBAL LOCAL CONSTANT PRIVATE KERNEL
%%

PROGRAM: DIRECTIVES OPS

DIRECTIVES:
|       DIRECTIVES '#' INCLUDE '<' ID '>' 
|       DIRECTIVES '#' INCLUDE STRING
|       DIRECTIVES '#' INCLUDE '<' ID DOT ID '>' 
|       DIRECTIVES '#' DEFINE ID VAL
|       DIRECTIVES '#' DEFINE ID '(' MACR ')' EXPR
|       DIRECTIVES '#' DEFINE ID '(' MACR ')' FOR_MACR
|       DIRECTIVES '#' DEFINE ID '(' MACR ')' WHILE_MACR
|       DIRECTIVES '#' DEFINE ID '(' MACR ')' DO_WHILE_MACR

OPS:    OP
|       OPS OP


STRUCT_UNION_DEFI:
        STRUCT_UNION_TYPES ID '{' VAR_DEFIS '}'
|       STRUCT_UNION_TYPES ID '{' VAR_DEFIS '}' ID


STRUCT_UNION_DECL:
        STRUCT_UNION_TYPES ID ID '=' '{' ARGS '}'
|       STRUCT_UNION_TYPES ID ID

INT_NUM: DIGITS
DIGITS:  DIGIT
|        DIGITS DIGIT

FLOAT_NUM: 
         DIGITS FLOAT_EXP
|        DIGITS DOT
|        DIGITS DOT DIGITS
|               DOT DIGITS
|        DIGITS DOT        FLOAT_EXP      
|        DIGITS DOT DIGITS FLOAT_EXP 
|               DOT DIGITS FLOAT_EXP  

POINTER: '*' | POINTER '*'

OP:     
        ';'
|       EXPR ';'
|       IF '(' EXPR ')' '{' OPS '}'
|       IF '(' EXPR ')' '{' OPS '}' ELSE '{' OPS '}'
|       FOR_OP
|       WHILE_OP
|       DO_WHILE_OP
|       RETURN                  ';'
|       RETURN FUNCTOR          ';'
|       VAR_DEFI                ';'
|       STRUCT_UNION_DEFI       ';'
|       VAR_DECL
|       FUNCTION_DECL_DEFI
|       FOR error ';'           { yyerrok; }
|       EXPR error OP           { yyerrok; }
|       error OP                { yyerrok; }
|       VAR_DEFI error ';'      { yyerrok; }


FOR_OP: FOR '(' FOR_EXPR_1 ';' FOR_EXPR_2 ';' FOR_EXPR_3 ')' OP

WHILE_OP: WHILE '(' EXPR ')' OP

DO_WHILE_OP: DO OP WHILE '(' EXPR ')' ';'

FOR_MACR: FOR '(' FOR_EXPR_1 ';' FOR_EXPR_2 ';' FOR_EXPR_3 ')' '{' MACR '}'

WHILE_MACR: WHILE '(' EXPR ')' '{' MACR '}'

DO_WHILE_MACR: DO '{' MACR '}' WHILE '(' EXPR ')'

FOR_EXPR_1:
|   VAR_DEFI
|   FOR_EXPR_1 ',' VAR_ASSIGN


FOR_EXPR_2:
|       EXPR_LOGIC_1

FOR_EXPR_3:
|       VAR_ASSIGN 

BODY:
    '{'     '}'
|   '{' OPS '}'

EXPR:
        EXPR_LOGIC_1
|       VAR_ASSIGN

TYPES:
        INT
|       CHAR
|       FLOAT
|       DOUBLE
|       VOID

ADDR_QUAL:
        GLOBAL
|       LOCAL
|       CONSTANT
|       PRIVATE

STRUCT_UNION_TYPES:
        STRUCT
|       UNION

cmp_symbols:
        EQ 
|       NE 
|       LE 
|       GE 
|       '>' 
|       '<' 

FUNCTION_DECL_DEFI: 
        TYPES ID FUNCTION_DECL_FUNCTOR BODY
|       TYPES ID FUNCTION_DECL_FUNCTOR ';'
|       KERNEL VOID ID FUNCTION_DECL_FUNCTOR BODY
|       KERNEL VOID ID FUNCTION_DECL_FUNCTOR ';'
|       ADDR_QUAL TYPES POINTER ID FUNCTION_DECL_FUNCTOR BODY 
|       ADDR_QUAL TYPES POINTER ID FUNCTION_DECL_FUNCTOR ';'
|                 TYPES POINTER ID FUNCTION_DECL_FUNCTOR BODY 
|                 TYPES POINTER ID FUNCTION_DECL_FUNCTOR ';'


ID_VAL_PART:
        ID
|       ID_VAL_PART ',' ID

VAR_DECL:
        TYPES VAR_ASSIGNS
|       PTR_DECL
|       STRUCT_UNION_DECL

PTR_DECL:
                        TYPES POINTER VAR_ASSIGN
|       ADDR_QUAL       TYPES POINTER VAR_ASSIGN
|                 CONST TYPES POINTER VAR_ASSIGN
|       ADDR_QUAL CONST TYPES POINTER VAR_ASSIGN


VAR_ASSIGN: ID '=' EXPR
VAR_ASSIGNS:
        VAR_ASSIGN
|       VAR_ASSIGNS ',' VAR_ASSIGN

VAR_DEFI: 
                        TYPES         ID_VAL_PART
|       ADDR_QUAL       TYPES POINTER ID_VAL_PART
|                       TYPES POINTER ID_VAL_PART
|                 CONST TYPES         ID_VAL_PART
|       ADDR_QUAL CONST TYPES POINTER ID_VAL_PART
|                 CONST TYPES POINTER ID_VAL_PART

VAR_DEFIS:
        VAR_DEFI ';'
|       VAR_DEFIS VAR_DEFI ';'


FUNC_VAR_DEFI: 
                        TYPES         ID
|       ADDR_QUAL       TYPES POINTER ID
|                       TYPES POINTER ID
|                 CONST TYPES         ID
|       ADDR_QUAL CONST TYPES POINTER ID
|                 CONST TYPES POINTER ID

FUNC_VAR_DEFIS:
        FUNC_VAR_DEFI
|       FUNC_VAR_DEFIS ',' FUNC_VAR_DEFI


FUNCTION:
    PRINT

FUNCTION_DECL_FUNCTOR: '(' DECL_ARGS ')'
DECL_ARGS: | FUNC_VAR_DEFIS | DECL_ARGS ',' FUNC_VAR_DEFIS

FUNCTOR: '(' ARGS ')'

EXPR_LOGIC_1:
        EXPR_LOGIC_2
|       EXPR_LOGIC_1 AND EXPR_LOGIC_2
|       EXPR_LOGIC_1 OR  EXPR_LOGIC_2

EXPR_LOGIC_2:  
        EXPR_SUM
|       EXPR_LOGIC_2 cmp_symbols EXPR_SUM


EXPR_SUM: 
        EXPR_MUL
|       EXPR_SUM '+' EXPR_MUL
|       EXPR_SUM '-' EXPR_MUL

EXPR_MUL:   
        VAL
|       EXPR_MUL '*' VAL 
|       EXPR_MUL '/' VAL
|       EXPR_MUL '%' VAL

MACR:
|       ID
|       MACR ',' ID

VAL: 
    INT_NUM
|   FLOAT_NUM
|   STRING
|   UNARY VAL
|   '(' EXPR ')' 
|   ID 
|   FUNCTION FUNCTOR
|   ID '.' ID


UNARY:
    '-'
|   '+'
|   '!'

ARGS: | ARG | ARGS ',' ARG
ARG:   EXPR
