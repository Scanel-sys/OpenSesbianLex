%locations
%{
    #include "TextHandler.hpp"

    #define YYERROR_VERBOSE 1

    extern int yylineno;
    extern char * yytext;
    extern YYLTYPE yylloc;
    extern int yylex();
    extern void AppendObfBuffer();

    extern int directives_ended;
    extern int if_processing;

    extern void yyerror(const char *s) 
    {
        DumpRow();
        PrintError(s);
    }

    #define YY_INPUT(buf,result,max_size)  {\
    result = GetNextChar(buf, max_size); \
    if (  result <= 0  ) \
    	result = YY_NULL; \
    }
%}
%defines

%start PROGRAM 
%token DIGIT
%token IF ELSE WHILE DO FOR RETURN
%token EQ LE GE NE
%token AND OR 
%token INCLUDE DEFINE TYPEDEF IFDEF IFNDEF ENDIF
%token UNION STRUCT
%token STRING ID STRUCT_ID
%token PRINT
%token CONST VOID
%token INT CHAR FLOAT DOUBLE SIZE_T
%token GLOBAL LOCAL CONSTANT PRIVATE KERNEL
%token INCR DECR PLUS_IS MIN_IS MUL_IS DIV_IS AND_IS OR_IS MOD_IS XOR_IS TILDA_IS
%token UNSIGNED LONG SHORT 
%token FLOAT_NUM
%%

PRETYPES:
        UNSIGNED
|       LONG
|       SHORT

TYPES_EXT:                      
        ID                              { directives_ended = true; }
|       PRETYPES ID                     { directives_ended = true; }
|       ID PRETYPES                     { directives_ended = true; }
|       PRETYPES                        { directives_ended = true; }
|       CONST ID                        { directives_ended = true; }
|       CONST PRETYPES ID               { directives_ended = true; }
|       CONST ID PRETYPES               { directives_ended = true; }
|       CONST PRETYPES                  { directives_ended = true; }
|       ID           CONST              { directives_ended = true; }
|       PRETYPES ID  CONST              { directives_ended = true; }
|       ID PRETYPES  CONST              { directives_ended = true; }
|       PRETYPES        CONST           { directives_ended = true; }
|       TYPES                           { directives_ended = true; }
|       PRETYPES TYPES                  { directives_ended = true; }
|       TYPES PRETYPES                  { directives_ended = true; }
|       CONST TYPES                     { directives_ended = true; }
|       CONST PRETYPES TYPES            { directives_ended = true; }
|       CONST TYPES PRETYPES            { directives_ended = true; }
|       TYPES           CONST           { directives_ended = true; }
|       PRETYPES TYPES  CONST           { directives_ended = true; }
|       TYPES PRETYPES  CONST           { directives_ended = true; }

TYPES:
        INT
|       CHAR
|       FLOAT
|       DOUBLE
|       VOID
|       SIZE_T

PROGRAM: 
        DIRECTIVES NONFUNC_OPS 

DIRECTIVES:
|       DIRECTIVES '#' INCLUDE STRING                            
|       DIRECTIVES '#' INCLUDE '<' GEN_ID '>'                    
|       DIRECTIVES '#' DEFINE ID DIRECTIVE_VAL                   
|       DIRECTIVES '#' DEFINE ID '(' MACR ')' EXPR               
|       DIRECTIVES '#' DEFINE ID '(' MACR ')' FOR_MACR           
|       DIRECTIVES '#' DEFINE ID '(' MACR ')' WHILE_MACR         
|       DIRECTIVES '#' DEFINE ID '(' MACR ')' DO_WHILE_MACR      

DIRECTIVE_VAL:
    INT_NUM
|   FLOAT_NUM
|   STRING
|   UNARY VAL
|   FUNCTION FUNCTOR

IF_DEF:
        '#' IFDEF VAL NONFUNC_OPS '#' ENDIF
|       '#' IFNDEF VAL NONFUNC_OPS '#' ENDIF


SYMBOLS_IS:
        PLUS_IS
|       MIN_IS
|       MUL_IS
|       DIV_IS
|       AND_IS
|       OR_IS
|       MOD_IS
|       XOR_IS
|       TILDA_IS

STRUCT_UNION_DEFI:
        STRUCT_UNION_TYPES ID '{' VAR_DEFIS '}'
|       STRUCT_UNION_TYPES ID '{' VAR_DEFIS '}' ID


STRUCT_UNION_DECL:
        STRUCT_UNION_TYPES ID ID '=' '{' ARGS '}'
|       STRUCT_UNION_TYPES ID ID

INT_NUM: DIGITS
DIGITS:  DIGIT
|        DIGITS DIGIT


POINTER: '*' | POINTER '*'

NONFUNC_OP:
        ';'
|       VAR_DEFI                ';'
|       STRUCT_UNION_DEFI       ';'
|       VAR_DECL                ';'
|       VAR_ASSIGN              ';'
|       TYPEDEFS
|       IF_DEF
|       FUNCTION_DECL_DEFI
|       error NONFUNC_OP        { yyerrok; }
|       VAR_DEFI error ';'      { yyerrok; }


NONFUNC_OPS: 
        NONFUNC_OP             
|       NONFUNC_OPS NONFUNC_OP  


FUNC_OP:
        BODY
|       ';'
|       EXPR ';'
|       IF_EXPR
|       IF_DEF
|       FOR_OP
|       WHILE_OP
|       DO_WHILE_OP
|       ARR_ASSIGN              ';'
|       RETURN                  ';'
|       RETURN FUNCTOR          ';'
|       RETURN EXPR             ';'
|       VAR_DEFI                ';'
|       STRUCT_UNION_DEFI       ';'
|       VAR_DECL                ';'
|       FOR error ';'           { yyerrok; }
|       EXPR error FUNC_OP      { yyerrok; }
|       error FUNC_OP           { yyerrok; }
|       VAR_DEFI error ';'      { yyerrok; }

IF_EXPR:
        IF '(' EXPR ')' '{' FUNC_OPS '}'                                    { if_processing = false; }    
|       IF '(' EXPR ')' '{' FUNC_OPS '}'         ELSE '{' FUNC_OPS '}'      { if_processing = false; }
|       IF '(' EXPR ')' '{' FUNC_OPS '}' ELSE_IF                            { if_processing = false; }
|       IF '(' EXPR ')' '{' FUNC_OPS '}' ELSE_IF ELSE '{' FUNC_OPS '}'      { if_processing = false; }

ELSE_IF:
        ELSE IF '(' EXPR ')' '{' FUNC_OPS '}'
|       ELSE_IF ELSE IF '(' EXPR ')' '{' FUNC_OPS '}'

BODY:
    '{'          '}'
|   '{' FUNC_OPS '}'

FUNC_OPS:    
        FUNC_OP
|       FUNC_OPS FUNC_OP

TYPEDEFS:
        TYPEDEF STRUCT_UNION_TYPES '{' VAR_DEFIS '}' ID ';'
|       TYPEDEF TYPES_EXT ID ';'

FOR_OP: FOR '(' FOR_EXPR_1 ';' FOR_EXPR_2 ';' FOR_EXPR_3 ')' FUNC_OPS

WHILE_OP: WHILE '(' EXPR ')' BODY

DO_WHILE_OP: DO BODY WHILE '(' EXPR ')' ';'

FOR_MACR: FOR '(' FOR_EXPR_1 ';' FOR_EXPR_2 ';' FOR_EXPR_3 ')' '{' MACR '}'

WHILE_MACR: WHILE '(' EXPR ')' '{' MACR '}'

DO_WHILE_MACR: DO '{' MACR '}' WHILE '(' EXPR ')'

FOR_EXPR_1:
|   VAR_DECL
|   VAR_DEFI
|   FOR_EXPR_1 ',' VAR_ASSIGN
|   EXPR


FOR_EXPR_2:
|       EXPR_LOGIC_1

FOR_EXPR_3:
|       VAR_ASSIGN
|       ARR_ASSIGN
|       GEN_ID INCR
|       INCR GEN_ID
|       GEN_ID DECR
|       DECR GEN_ID

GEN_ID:
        ID
|       STRUCT_ID

EXPR:
        EXPR_LOGIC_1
|       VAR_ASSIGN

ADDR_QUAL:
        GLOBAL
|       LOCAL
|       CONSTANT
|       PRIVATE

STRUCT_UNION_TYPES:
        STRUCT
|       UNION

cmp_symbols:
        EQ 
|       NE 
|       LE 
|       GE 
|       '>' 
|       '<' 

FUNCTION_DECL_DEFI: 
        TYPES_EXT                   ID FUNCTION_DECL_FUNCTOR BODY       
|       TYPES_EXT                   ID FUNCTION_DECL_FUNCTOR ';'
|       KERNEL VOID                 ID FUNCTION_DECL_FUNCTOR BODY
|       KERNEL VOID                 ID FUNCTION_DECL_FUNCTOR ';'
|       ADDR_QUAL TYPES_EXT POINTER ID FUNCTION_DECL_FUNCTOR BODY 
|       ADDR_QUAL TYPES_EXT POINTER ID FUNCTION_DECL_FUNCTOR ';'
|                 TYPES_EXT POINTER ID FUNCTION_DECL_FUNCTOR BODY 
|                 TYPES_EXT POINTER ID FUNCTION_DECL_FUNCTOR ';'




PTR_DECL:
                  TYPES_EXT POINTER VAR_ASSIGN
|       ADDR_QUAL TYPES_EXT POINTER VAR_ASSIGN



VAR_ASSIGN: 
        GEN_ID '=' EXPR
|       GEN_ID SYMBOLS_IS EXPR

ARR_ASSIGN:
        GEN_ID ARR_BRACERS_ASSIGN '=' EXPR

VAR_ASSIGNS:
        VAR_ASSIGN
|       VAR_ASSIGNS ',' VAR_ASSIGN

ID_VAL_PART:
        ID
|       ID_VAL_PART ',' ID

VAR_DECL:
        TYPES_EXT VAR_ASSIGNS
|       PTR_DECL
|       STRUCT_UNION_DECL

VAR_DEFI: 
                  TYPES_EXT         ID_VAL_PART 
|                 TYPES_EXT POINTER ID_VAL_PART 
|       ADDR_QUAL TYPES_EXT POINTER ID_VAL_PART 
|                 TYPES_EXT         ID_VAL_PART ARR_BRACERS_DEFI
|       ADDR_QUAL TYPES_EXT         ID_VAL_PART ARR_BRACERS_DEFI
|                 TYPES_EXT POINTER ID_VAL_PART ARR_BRACERS_DEFI
|       ADDR_QUAL TYPES_EXT POINTER ID_VAL_PART ARR_BRACERS_DEFI

VAR_DEFIS:
        VAR_DEFI ';'
|       VAR_DEFIS VAR_DEFI ';'


FUNC_VAR_DEFI: 
                  TYPES_EXT         ID
|                 TYPES_EXT POINTER ID
|       ADDR_QUAL TYPES_EXT POINTER ID
|                 TYPES_EXT         ID ARR_BRACERS_DEFI
|       ADDR_QUAL TYPES_EXT         ID ARR_BRACERS_DEFI
|                 TYPES_EXT POINTER ID ARR_BRACERS_DEFI
|       ADDR_QUAL TYPES_EXT POINTER ID ARR_BRACERS_DEFI

FUNC_VAR_DEFIS:
        FUNC_VAR_DEFI
|       FUNC_VAR_DEFIS ',' FUNC_VAR_DEFI

ARR_BRACERS_DEFI:
                         '['      ']'
|                        '[' EXPR ']'
|       ARR_BRACERS_DEFI '[' EXPR ']'
|                        '['      ']' '=' '{' ARGS '}'
|                        '[' EXPR ']' '=' '{' ARGS '}'
|       ARR_BRACERS_DEFI '[' EXPR ']' '=' '{' ARGS '}'

ARR_BRACERS_ASSIGN:
                           '[' EXPR ']'
|       ARR_BRACERS_ASSIGN '[' EXPR ']'


FUNCTION:
        ID
|       PRINT

FUNCTION_DECL_FUNCTOR: '(' DECL_ARGS ')'
DECL_ARGS: | FUNC_VAR_DEFIS | DECL_ARGS ',' FUNC_VAR_DEFIS

FUNCTOR: '(' ARGS ')'

EXPR_LOGIC_1:
        EXPR_LOGIC_2
|       EXPR_LOGIC_1 AND EXPR_LOGIC_2
|       EXPR_LOGIC_1 OR  EXPR_LOGIC_2

EXPR_LOGIC_2:  
        EXPR_SUM
|       EXPR_LOGIC_2 cmp_symbols EXPR_SUM


EXPR_SUM: 
        EXPR_MUL
|       EXPR_SUM '+' EXPR_MUL
|       EXPR_SUM '-' EXPR_MUL

EXPR_MUL:   
        VAL
|       EXPR_MUL '*' VAL 
|       EXPR_MUL '/' VAL
|       EXPR_MUL '%' VAL

MACR:
|       ID
|       MACR ',' ID

VAL: 
    INT_NUM
|   FLOAT_NUM
|   STRING
|   UNARY VAL
|   '(' EXPR ')' 
|   GEN_ID ARR_BRACERS_ASSIGN 
|   FUNCTION FUNCTOR
|   GEN_ID
|   GEN_ID INCR
|   INCR GEN_ID
|   GEN_ID DECR
|   DECR GEN_ID


UNARY:
    '-'
|   '+'
|   '!'

ARGS: | ARG | ARGS ',' ARG
ARG:   EXPR
